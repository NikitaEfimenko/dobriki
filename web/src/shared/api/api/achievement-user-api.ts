/* tslint:disable */
/* eslint-disable */
/**
 * Dobriki API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserAchievement } from '../models';
/**
 * AchievementUserApi - axios parameter creator
 * @export
 */
export const AchievementUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserCreate: async (data: UserAchievement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('achievementUserCreate', 'data', data)
            const localVarPath = `/achievement-user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('achievementUserDelete', 'id', id)
            const localVarPath = `/achievement-user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/achievement-user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserPartialUpdate: async (id: number, data: UserAchievement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('achievementUserPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('achievementUserPartialUpdate', 'data', data)
            const localVarPath = `/achievement-user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('achievementUserRead', 'id', id)
            const localVarPath = `/achievement-user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserUpdate: async (id: number, data: UserAchievement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('achievementUserUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('achievementUserUpdate', 'data', data)
            const localVarPath = `/achievement-user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AchievementUserApi - functional programming interface
 * @export
 */
export const AchievementUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AchievementUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserCreate(data: UserAchievement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAchievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAchievement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserPartialUpdate(id: number, data: UserAchievement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAchievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAchievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Достижение пользователя.
         * @param {UserAchievement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async achievementUserUpdate(id: number, data: UserAchievement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAchievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.achievementUserUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AchievementUserApi - factory interface
 * @export
 */
export const AchievementUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AchievementUserApiFp(configuration)
    return {
        /**
         * 
         * @param {AchievementUserApiAchievementUserCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserCreate(requestParameters: AchievementUserApiAchievementUserCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UserAchievement> {
            return localVarFp.achievementUserCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AchievementUserApiAchievementUserDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserDelete(requestParameters: AchievementUserApiAchievementUserDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.achievementUserDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserList(options?: AxiosRequestConfig): AxiosPromise<Array<UserAchievement>> {
            return localVarFp.achievementUserList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AchievementUserApiAchievementUserPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserPartialUpdate(requestParameters: AchievementUserApiAchievementUserPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserAchievement> {
            return localVarFp.achievementUserPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AchievementUserApiAchievementUserReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserRead(requestParameters: AchievementUserApiAchievementUserReadRequest, options?: AxiosRequestConfig): AxiosPromise<UserAchievement> {
            return localVarFp.achievementUserRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AchievementUserApiAchievementUserUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        achievementUserUpdate(requestParameters: AchievementUserApiAchievementUserUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserAchievement> {
            return localVarFp.achievementUserUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for achievementUserCreate operation in AchievementUserApi.
 * @export
 * @interface AchievementUserApiAchievementUserCreateRequest
 */
export interface AchievementUserApiAchievementUserCreateRequest {
    /**
     * 
     * @type {UserAchievement}
     * @memberof AchievementUserApiAchievementUserCreate
     */
    readonly data: UserAchievement
}

/**
 * Request parameters for achievementUserDelete operation in AchievementUserApi.
 * @export
 * @interface AchievementUserApiAchievementUserDeleteRequest
 */
export interface AchievementUserApiAchievementUserDeleteRequest {
    /**
     * A unique integer value identifying this Достижение пользователя.
     * @type {number}
     * @memberof AchievementUserApiAchievementUserDelete
     */
    readonly id: number
}

/**
 * Request parameters for achievementUserPartialUpdate operation in AchievementUserApi.
 * @export
 * @interface AchievementUserApiAchievementUserPartialUpdateRequest
 */
export interface AchievementUserApiAchievementUserPartialUpdateRequest {
    /**
     * A unique integer value identifying this Достижение пользователя.
     * @type {number}
     * @memberof AchievementUserApiAchievementUserPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {UserAchievement}
     * @memberof AchievementUserApiAchievementUserPartialUpdate
     */
    readonly data: UserAchievement
}

/**
 * Request parameters for achievementUserRead operation in AchievementUserApi.
 * @export
 * @interface AchievementUserApiAchievementUserReadRequest
 */
export interface AchievementUserApiAchievementUserReadRequest {
    /**
     * A unique integer value identifying this Достижение пользователя.
     * @type {number}
     * @memberof AchievementUserApiAchievementUserRead
     */
    readonly id: number
}

/**
 * Request parameters for achievementUserUpdate operation in AchievementUserApi.
 * @export
 * @interface AchievementUserApiAchievementUserUpdateRequest
 */
export interface AchievementUserApiAchievementUserUpdateRequest {
    /**
     * A unique integer value identifying this Достижение пользователя.
     * @type {number}
     * @memberof AchievementUserApiAchievementUserUpdate
     */
    readonly id: number

    /**
     * 
     * @type {UserAchievement}
     * @memberof AchievementUserApiAchievementUserUpdate
     */
    readonly data: UserAchievement
}

/**
 * AchievementUserApi - object-oriented interface
 * @export
 * @class AchievementUserApi
 * @extends {BaseAPI}
 */
export class AchievementUserApi extends BaseAPI {
    /**
     * 
     * @param {AchievementUserApiAchievementUserCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserCreate(requestParameters: AchievementUserApiAchievementUserCreateRequest, options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AchievementUserApiAchievementUserDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserDelete(requestParameters: AchievementUserApiAchievementUserDeleteRequest, options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserList(options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AchievementUserApiAchievementUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserPartialUpdate(requestParameters: AchievementUserApiAchievementUserPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AchievementUserApiAchievementUserReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserRead(requestParameters: AchievementUserApiAchievementUserReadRequest, options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AchievementUserApiAchievementUserUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AchievementUserApi
     */
    public achievementUserUpdate(requestParameters: AchievementUserApiAchievementUserUpdateRequest, options?: AxiosRequestConfig) {
        return AchievementUserApiFp(this.configuration).achievementUserUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
