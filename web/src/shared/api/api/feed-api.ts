/* tslint:disable */
/* eslint-disable */
/**
 * Dobriki API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Article } from '../models';
// @ts-ignore
import { ArticleCategory } from '../models';
// @ts-ignore
import { ArticleCategoryPreview } from '../models';
// @ts-ignore
import { FeedArticlesList200Response } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export const FeedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesCreate: async (data: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedArticlesCreate', 'data', data)
            const localVarPath = `/feed/articles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesDelete', 'id', id)
            const localVarPath = `/feed/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получает всех пользователей, которые лайкнули `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesFans: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesFans', 'id', id)
            const localVarPath = `/feed/articles/{id}/fans/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Лайкает `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesLike: async (id: number, data: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesLike', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedArticlesLike', 'data', data)
            const localVarPath = `/feed/articles/{id}/like/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {string} [category] category
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesList: async (ordering?: string, search?: string, category?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feed/articles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesPartialUpdate: async (id: number, data: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedArticlesPartialUpdate', 'data', data)
            const localVarPath = `/feed/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesRead', 'id', id)
            const localVarPath = `/feed/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Удаляет лайк с `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesUnlike: async (id: number, data: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesUnlike', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedArticlesUnlike', 'data', data)
            const localVarPath = `/feed/articles/{id}/unlike/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesUpdate: async (id: number, data: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedArticlesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedArticlesUpdate', 'data', data)
            const localVarPath = `/feed/articles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryCreate: async (data: ArticleCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedCategoryCreate', 'data', data)
            const localVarPath = `/feed/category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedCategoryDelete', 'id', id)
            const localVarPath = `/feed/category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feed/category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryPartialUpdate: async (id: number, data: ArticleCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedCategoryPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedCategoryPartialUpdate', 'data', data)
            const localVarPath = `/feed/category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedCategoryRead', 'id', id)
            const localVarPath = `/feed/category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryUpdate: async (id: number, data: ArticleCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedCategoryUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('feedCategoryUpdate', 'data', data)
            const localVarPath = `/feed/category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedApi - functional programming interface
 * @export
 */
export const FeedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesCreate(data: Article, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получает всех пользователей, которые лайкнули `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesFans(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesFans(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Лайкает `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesLike(id: number, data: Article, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesLike(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {string} [search] A search term.
         * @param {string} [category] category
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesList(ordering?: string, search?: string, category?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedArticlesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesList(ordering, search, category, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesPartialUpdate(id: number, data: Article, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Удаляет лайк с `obj`.
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesUnlike(id: number, data: Article, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesUnlike(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Статья.
         * @param {Article} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedArticlesUpdate(id: number, data: Article, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedArticlesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryCreate(data: ArticleCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleCategoryPreview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryPartialUpdate(id: number, data: ArticleCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Категория статей.
         * @param {ArticleCategory} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedCategoryUpdate(id: number, data: ArticleCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedCategoryUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedApi - factory interface
 * @export
 */
export const FeedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedApiFp(configuration)
    return {
        /**
         * 
         * @param {FeedApiFeedArticlesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesCreate(requestParameters: FeedApiFeedArticlesCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedArticlesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesDelete(requestParameters: FeedApiFeedArticlesDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.feedArticlesDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получает всех пользователей, которые лайкнули `obj`.
         * @param {FeedApiFeedArticlesFansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesFans(requestParameters: FeedApiFeedArticlesFansRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesFans(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Лайкает `obj`.
         * @param {FeedApiFeedArticlesLikeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesLike(requestParameters: FeedApiFeedArticlesLikeRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesLike(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedArticlesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesList(requestParameters: FeedApiFeedArticlesListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FeedArticlesList200Response> {
            return localVarFp.feedArticlesList(requestParameters.ordering, requestParameters.search, requestParameters.category, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedArticlesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesPartialUpdate(requestParameters: FeedApiFeedArticlesPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedArticlesReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesRead(requestParameters: FeedApiFeedArticlesReadRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Удаляет лайк с `obj`.
         * @param {FeedApiFeedArticlesUnlikeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesUnlike(requestParameters: FeedApiFeedArticlesUnlikeRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesUnlike(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedArticlesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedArticlesUpdate(requestParameters: FeedApiFeedArticlesUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Article> {
            return localVarFp.feedArticlesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedCategoryCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryCreate(requestParameters: FeedApiFeedCategoryCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleCategory> {
            return localVarFp.feedCategoryCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedCategoryDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryDelete(requestParameters: FeedApiFeedCategoryDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.feedCategoryDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryList(options?: AxiosRequestConfig): AxiosPromise<Array<ArticleCategoryPreview>> {
            return localVarFp.feedCategoryList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedCategoryPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryPartialUpdate(requestParameters: FeedApiFeedCategoryPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleCategory> {
            return localVarFp.feedCategoryPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedCategoryReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryRead(requestParameters: FeedApiFeedCategoryReadRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleCategory> {
            return localVarFp.feedCategoryRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedApiFeedCategoryUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedCategoryUpdate(requestParameters: FeedApiFeedCategoryUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleCategory> {
            return localVarFp.feedCategoryUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for feedArticlesCreate operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesCreateRequest
 */
export interface FeedApiFeedArticlesCreateRequest {
    /**
     * 
     * @type {Article}
     * @memberof FeedApiFeedArticlesCreate
     */
    readonly data: Article
}

/**
 * Request parameters for feedArticlesDelete operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesDeleteRequest
 */
export interface FeedApiFeedArticlesDeleteRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesDelete
     */
    readonly id: number
}

/**
 * Request parameters for feedArticlesFans operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesFansRequest
 */
export interface FeedApiFeedArticlesFansRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesFans
     */
    readonly id: number
}

/**
 * Request parameters for feedArticlesLike operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesLikeRequest
 */
export interface FeedApiFeedArticlesLikeRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesLike
     */
    readonly id: number

    /**
     * 
     * @type {Article}
     * @memberof FeedApiFeedArticlesLike
     */
    readonly data: Article
}

/**
 * Request parameters for feedArticlesList operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesListRequest
 */
export interface FeedApiFeedArticlesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof FeedApiFeedArticlesList
     */
    readonly ordering?: string

    /**
     * A search term.
     * @type {string}
     * @memberof FeedApiFeedArticlesList
     */
    readonly search?: string

    /**
     * category
     * @type {string}
     * @memberof FeedApiFeedArticlesList
     */
    readonly category?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof FeedApiFeedArticlesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof FeedApiFeedArticlesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for feedArticlesPartialUpdate operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesPartialUpdateRequest
 */
export interface FeedApiFeedArticlesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Article}
     * @memberof FeedApiFeedArticlesPartialUpdate
     */
    readonly data: Article
}

/**
 * Request parameters for feedArticlesRead operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesReadRequest
 */
export interface FeedApiFeedArticlesReadRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesRead
     */
    readonly id: number
}

/**
 * Request parameters for feedArticlesUnlike operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesUnlikeRequest
 */
export interface FeedApiFeedArticlesUnlikeRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesUnlike
     */
    readonly id: number

    /**
     * 
     * @type {Article}
     * @memberof FeedApiFeedArticlesUnlike
     */
    readonly data: Article
}

/**
 * Request parameters for feedArticlesUpdate operation in FeedApi.
 * @export
 * @interface FeedApiFeedArticlesUpdateRequest
 */
export interface FeedApiFeedArticlesUpdateRequest {
    /**
     * A unique integer value identifying this Статья.
     * @type {number}
     * @memberof FeedApiFeedArticlesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Article}
     * @memberof FeedApiFeedArticlesUpdate
     */
    readonly data: Article
}

/**
 * Request parameters for feedCategoryCreate operation in FeedApi.
 * @export
 * @interface FeedApiFeedCategoryCreateRequest
 */
export interface FeedApiFeedCategoryCreateRequest {
    /**
     * 
     * @type {ArticleCategory}
     * @memberof FeedApiFeedCategoryCreate
     */
    readonly data: ArticleCategory
}

/**
 * Request parameters for feedCategoryDelete operation in FeedApi.
 * @export
 * @interface FeedApiFeedCategoryDeleteRequest
 */
export interface FeedApiFeedCategoryDeleteRequest {
    /**
     * A unique integer value identifying this Категория статей.
     * @type {number}
     * @memberof FeedApiFeedCategoryDelete
     */
    readonly id: number
}

/**
 * Request parameters for feedCategoryPartialUpdate operation in FeedApi.
 * @export
 * @interface FeedApiFeedCategoryPartialUpdateRequest
 */
export interface FeedApiFeedCategoryPartialUpdateRequest {
    /**
     * A unique integer value identifying this Категория статей.
     * @type {number}
     * @memberof FeedApiFeedCategoryPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ArticleCategory}
     * @memberof FeedApiFeedCategoryPartialUpdate
     */
    readonly data: ArticleCategory
}

/**
 * Request parameters for feedCategoryRead operation in FeedApi.
 * @export
 * @interface FeedApiFeedCategoryReadRequest
 */
export interface FeedApiFeedCategoryReadRequest {
    /**
     * A unique integer value identifying this Категория статей.
     * @type {number}
     * @memberof FeedApiFeedCategoryRead
     */
    readonly id: number
}

/**
 * Request parameters for feedCategoryUpdate operation in FeedApi.
 * @export
 * @interface FeedApiFeedCategoryUpdateRequest
 */
export interface FeedApiFeedCategoryUpdateRequest {
    /**
     * A unique integer value identifying this Категория статей.
     * @type {number}
     * @memberof FeedApiFeedCategoryUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ArticleCategory}
     * @memberof FeedApiFeedCategoryUpdate
     */
    readonly data: ArticleCategory
}

/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export class FeedApi extends BaseAPI {
    /**
     * 
     * @param {FeedApiFeedArticlesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesCreate(requestParameters: FeedApiFeedArticlesCreateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedArticlesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesDelete(requestParameters: FeedApiFeedArticlesDeleteRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получает всех пользователей, которые лайкнули `obj`.
     * @param {FeedApiFeedArticlesFansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesFans(requestParameters: FeedApiFeedArticlesFansRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesFans(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Лайкает `obj`.
     * @param {FeedApiFeedArticlesLikeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesLike(requestParameters: FeedApiFeedArticlesLikeRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesLike(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedArticlesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesList(requestParameters: FeedApiFeedArticlesListRequest = {}, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesList(requestParameters.ordering, requestParameters.search, requestParameters.category, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedArticlesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesPartialUpdate(requestParameters: FeedApiFeedArticlesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedArticlesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesRead(requestParameters: FeedApiFeedArticlesReadRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Удаляет лайк с `obj`.
     * @param {FeedApiFeedArticlesUnlikeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesUnlike(requestParameters: FeedApiFeedArticlesUnlikeRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesUnlike(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedArticlesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedArticlesUpdate(requestParameters: FeedApiFeedArticlesUpdateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedArticlesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedCategoryCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryCreate(requestParameters: FeedApiFeedCategoryCreateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedCategoryDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryDelete(requestParameters: FeedApiFeedCategoryDeleteRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryList(options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedCategoryPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryPartialUpdate(requestParameters: FeedApiFeedCategoryPartialUpdateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedCategoryReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryRead(requestParameters: FeedApiFeedCategoryReadRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedApiFeedCategoryUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public feedCategoryUpdate(requestParameters: FeedApiFeedCategoryUpdateRequest, options?: AxiosRequestConfig) {
        return FeedApiFp(this.configuration).feedCategoryUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
