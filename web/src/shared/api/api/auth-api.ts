/* tslint:disable */
/* eslint-disable */
/**
 * Dobriki API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CookieTokenRefresh } from '../models';
// @ts-ignore
import { Login } from '../models';
// @ts-ignore
import { Register } from '../models';
// @ts-ignore
import { TokenVerify } from '../models';
// @ts-ignore
import { UserDetails } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginCreate: async (data: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authLoginCreate', 'data', data)
            const localVarPath = `/auth/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Register} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterCreate: async (data: Register, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authRegisterCreate', 'data', data)
            const localVarPath = `/auth/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CookieTokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenRefreshCreate: async (data: CookieTokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authTokenRefreshCreate', 'data', data)
            const localVarPath = `/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenVerifyCreate: async (data: TokenVerify, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authTokenVerifyCreate', 'data', data)
            const localVarPath = `/auth/token/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {UserDetails} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserPartialUpdate: async (data: UserDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authUserPartialUpdate', 'data', data)
            const localVarPath = `/auth/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserRead: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {UserDetails} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserUpdate: async (data: UserDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authUserUpdate', 'data', data)
            const localVarPath = `/auth/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreate(data: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Register} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreate(data: Register, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CookieTokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenRefreshCreate(data: CookieTokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CookieTokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTokenRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVerify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTokenVerifyCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {UserDetails} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authUserPartialUpdate(data: UserDetails, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authUserPartialUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authUserRead(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authUserRead(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {UserDetails} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authUserUpdate(data: UserDetails, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authUserUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {AuthApiAuthLoginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginCreate(requestParameters: AuthApiAuthLoginCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Login> {
            return localVarFp.authLoginCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutList(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLogoutList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterCreate(requestParameters: AuthApiAuthRegisterCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Register> {
            return localVarFp.authRegisterCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthTokenRefreshCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenRefreshCreate(requestParameters: AuthApiAuthTokenRefreshCreateRequest, options?: AxiosRequestConfig): AxiosPromise<CookieTokenRefresh> {
            return localVarFp.authTokenRefreshCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {AuthApiAuthTokenVerifyCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenVerifyCreate(requestParameters: AuthApiAuthTokenVerifyCreateRequest, options?: AxiosRequestConfig): AxiosPromise<TokenVerify> {
            return localVarFp.authTokenVerifyCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {AuthApiAuthUserPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserPartialUpdate(requestParameters: AuthApiAuthUserPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserDetails> {
            return localVarFp.authUserPartialUpdate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserRead(options?: AxiosRequestConfig): AxiosPromise<UserDetails> {
            return localVarFp.authUserRead(options).then((request) => request(axios, basePath));
        },
        /**
         * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
         * @param {AuthApiAuthUserUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserUpdate(requestParameters: AuthApiAuthUserUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserDetails> {
            return localVarFp.authUserUpdate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authLoginCreate operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginCreateRequest
 */
export interface AuthApiAuthLoginCreateRequest {
    /**
     * 
     * @type {Login}
     * @memberof AuthApiAuthLoginCreate
     */
    readonly data: Login
}

/**
 * Request parameters for authRegisterCreate operation in AuthApi.
 * @export
 * @interface AuthApiAuthRegisterCreateRequest
 */
export interface AuthApiAuthRegisterCreateRequest {
    /**
     * 
     * @type {Register}
     * @memberof AuthApiAuthRegisterCreate
     */
    readonly data: Register
}

/**
 * Request parameters for authTokenRefreshCreate operation in AuthApi.
 * @export
 * @interface AuthApiAuthTokenRefreshCreateRequest
 */
export interface AuthApiAuthTokenRefreshCreateRequest {
    /**
     * 
     * @type {CookieTokenRefresh}
     * @memberof AuthApiAuthTokenRefreshCreate
     */
    readonly data: CookieTokenRefresh
}

/**
 * Request parameters for authTokenVerifyCreate operation in AuthApi.
 * @export
 * @interface AuthApiAuthTokenVerifyCreateRequest
 */
export interface AuthApiAuthTokenVerifyCreateRequest {
    /**
     * 
     * @type {TokenVerify}
     * @memberof AuthApiAuthTokenVerifyCreate
     */
    readonly data: TokenVerify
}

/**
 * Request parameters for authUserPartialUpdate operation in AuthApi.
 * @export
 * @interface AuthApiAuthUserPartialUpdateRequest
 */
export interface AuthApiAuthUserPartialUpdateRequest {
    /**
     * 
     * @type {UserDetails}
     * @memberof AuthApiAuthUserPartialUpdate
     */
    readonly data: UserDetails
}

/**
 * Request parameters for authUserUpdate operation in AuthApi.
 * @export
 * @interface AuthApiAuthUserUpdateRequest
 */
export interface AuthApiAuthUserUpdateRequest {
    /**
     * 
     * @type {UserDetails}
     * @memberof AuthApiAuthUserUpdate
     */
    readonly data: UserDetails
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {AuthApiAuthLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginCreate(requestParameters: AuthApiAuthLoginCreateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogoutCreate(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogoutList(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogoutList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterCreate(requestParameters: AuthApiAuthRegisterCreateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthTokenRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTokenRefreshCreate(requestParameters: AuthApiAuthTokenRefreshCreateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTokenRefreshCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {AuthApiAuthTokenVerifyCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTokenVerifyCreate(requestParameters: AuthApiAuthTokenVerifyCreateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTokenVerifyCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * @param {AuthApiAuthUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authUserPartialUpdate(requestParameters: AuthApiAuthUserPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authUserPartialUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authUserRead(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authUserRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @summary Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * @param {AuthApiAuthUserUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authUserUpdate(requestParameters: AuthApiAuthUserUpdateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authUserUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
