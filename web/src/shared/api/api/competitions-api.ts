/* tslint:disable */
/* eslint-disable */
/**
 * Dobriki API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PersonalCompetition } from '../models';
// @ts-ignore
import { UserTeam } from '../models';
/**
 * CompetitionsApi - axios parameter creator
 * @export
 */
export const CompetitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalApply: async (id: number, data: PersonalCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsPersonalApply', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsPersonalApply', 'data', data)
            const localVarPath = `/competitions/personal/{id}/apply/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalCreate: async (data: PersonalCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsPersonalCreate', 'data', data)
            const localVarPath = `/competitions/personal/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsPersonalDelete', 'id', id)
            const localVarPath = `/competitions/personal/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/personal/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalPartialUpdate: async (id: number, data: PersonalCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsPersonalPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsPersonalPartialUpdate', 'data', data)
            const localVarPath = `/competitions/personal/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsPersonalRead', 'id', id)
            const localVarPath = `/competitions/personal/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalUpdate: async (id: number, data: PersonalCompetition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsPersonalUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsPersonalUpdate', 'data', data)
            const localVarPath = `/competitions/personal/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Вступить в команду `obj`.
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsApply: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsTeamsApply', 'id', id)
            const localVarPath = `/competitions/teams/{id}/apply/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsCreate: async (data: UserTeam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsTeamsCreate', 'data', data)
            const localVarPath = `/competitions/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsTeamsDelete', 'id', id)
            const localVarPath = `/competitions/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsPartialUpdate: async (id: number, data: UserTeam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsTeamsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsTeamsPartialUpdate', 'data', data)
            const localVarPath = `/competitions/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsTeamsRead', 'id', id)
            const localVarPath = `/competitions/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsUpdate: async (id: number, data: UserTeam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('competitionsTeamsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('competitionsTeamsUpdate', 'data', data)
            const localVarPath = `/competitions/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalApply(id: number, data: PersonalCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCompetition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalApply(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalCreate(data: PersonalCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCompetition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonalCompetition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalPartialUpdate(id: number, data: PersonalCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCompetition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCompetition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Пользовательское соревнование.
         * @param {PersonalCompetition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsPersonalUpdate(id: number, data: PersonalCompetition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalCompetition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsPersonalUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Вступить в команду `obj`.
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsApply(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsApply(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsCreate(data: UserTeam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTeam>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsPartialUpdate(id: number, data: UserTeam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Команда.
         * @param {UserTeam} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async competitionsTeamsUpdate(id: number, data: UserTeam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.competitionsTeamsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitionsApiFp(configuration)
    return {
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalApplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalApply(requestParameters: CompetitionsApiCompetitionsPersonalApplyRequest, options?: AxiosRequestConfig): AxiosPromise<PersonalCompetition> {
            return localVarFp.competitionsPersonalApply(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalCreate(requestParameters: CompetitionsApiCompetitionsPersonalCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PersonalCompetition> {
            return localVarFp.competitionsPersonalCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalDelete(requestParameters: CompetitionsApiCompetitionsPersonalDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.competitionsPersonalDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalList(options?: AxiosRequestConfig): AxiosPromise<Array<PersonalCompetition>> {
            return localVarFp.competitionsPersonalList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalPartialUpdate(requestParameters: CompetitionsApiCompetitionsPersonalPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PersonalCompetition> {
            return localVarFp.competitionsPersonalPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalRead(requestParameters: CompetitionsApiCompetitionsPersonalReadRequest, options?: AxiosRequestConfig): AxiosPromise<PersonalCompetition> {
            return localVarFp.competitionsPersonalRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsPersonalUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsPersonalUpdate(requestParameters: CompetitionsApiCompetitionsPersonalUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PersonalCompetition> {
            return localVarFp.competitionsPersonalUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * Вступить в команду `obj`.
         * @param {CompetitionsApiCompetitionsTeamsApplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsApply(requestParameters: CompetitionsApiCompetitionsTeamsApplyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.competitionsTeamsApply(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsTeamsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsCreate(requestParameters: CompetitionsApiCompetitionsTeamsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UserTeam> {
            return localVarFp.competitionsTeamsCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsTeamsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsDelete(requestParameters: CompetitionsApiCompetitionsTeamsDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.competitionsTeamsDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsList(options?: AxiosRequestConfig): AxiosPromise<Array<UserTeam>> {
            return localVarFp.competitionsTeamsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsTeamsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsPartialUpdate(requestParameters: CompetitionsApiCompetitionsTeamsPartialUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserTeam> {
            return localVarFp.competitionsTeamsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsTeamsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsRead(requestParameters: CompetitionsApiCompetitionsTeamsReadRequest, options?: AxiosRequestConfig): AxiosPromise<UserTeam> {
            return localVarFp.competitionsTeamsRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompetitionsApiCompetitionsTeamsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsTeamsUpdate(requestParameters: CompetitionsApiCompetitionsTeamsUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserTeam> {
            return localVarFp.competitionsTeamsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for competitionsPersonalApply operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalApplyRequest
 */
export interface CompetitionsApiCompetitionsPersonalApplyRequest {
    /**
     * A unique integer value identifying this Пользовательское соревнование.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsPersonalApply
     */
    readonly id: number

    /**
     * 
     * @type {PersonalCompetition}
     * @memberof CompetitionsApiCompetitionsPersonalApply
     */
    readonly data: PersonalCompetition
}

/**
 * Request parameters for competitionsPersonalCreate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalCreateRequest
 */
export interface CompetitionsApiCompetitionsPersonalCreateRequest {
    /**
     * 
     * @type {PersonalCompetition}
     * @memberof CompetitionsApiCompetitionsPersonalCreate
     */
    readonly data: PersonalCompetition
}

/**
 * Request parameters for competitionsPersonalDelete operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalDeleteRequest
 */
export interface CompetitionsApiCompetitionsPersonalDeleteRequest {
    /**
     * A unique integer value identifying this Пользовательское соревнование.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsPersonalDelete
     */
    readonly id: number
}

/**
 * Request parameters for competitionsPersonalPartialUpdate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalPartialUpdateRequest
 */
export interface CompetitionsApiCompetitionsPersonalPartialUpdateRequest {
    /**
     * A unique integer value identifying this Пользовательское соревнование.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsPersonalPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PersonalCompetition}
     * @memberof CompetitionsApiCompetitionsPersonalPartialUpdate
     */
    readonly data: PersonalCompetition
}

/**
 * Request parameters for competitionsPersonalRead operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalReadRequest
 */
export interface CompetitionsApiCompetitionsPersonalReadRequest {
    /**
     * A unique integer value identifying this Пользовательское соревнование.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsPersonalRead
     */
    readonly id: number
}

/**
 * Request parameters for competitionsPersonalUpdate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsPersonalUpdateRequest
 */
export interface CompetitionsApiCompetitionsPersonalUpdateRequest {
    /**
     * A unique integer value identifying this Пользовательское соревнование.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsPersonalUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PersonalCompetition}
     * @memberof CompetitionsApiCompetitionsPersonalUpdate
     */
    readonly data: PersonalCompetition
}

/**
 * Request parameters for competitionsTeamsApply operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsApplyRequest
 */
export interface CompetitionsApiCompetitionsTeamsApplyRequest {
    /**
     * A unique integer value identifying this Команда.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsTeamsApply
     */
    readonly id: number
}

/**
 * Request parameters for competitionsTeamsCreate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsCreateRequest
 */
export interface CompetitionsApiCompetitionsTeamsCreateRequest {
    /**
     * 
     * @type {UserTeam}
     * @memberof CompetitionsApiCompetitionsTeamsCreate
     */
    readonly data: UserTeam
}

/**
 * Request parameters for competitionsTeamsDelete operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsDeleteRequest
 */
export interface CompetitionsApiCompetitionsTeamsDeleteRequest {
    /**
     * A unique integer value identifying this Команда.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsTeamsDelete
     */
    readonly id: number
}

/**
 * Request parameters for competitionsTeamsPartialUpdate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsPartialUpdateRequest
 */
export interface CompetitionsApiCompetitionsTeamsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Команда.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsTeamsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {UserTeam}
     * @memberof CompetitionsApiCompetitionsTeamsPartialUpdate
     */
    readonly data: UserTeam
}

/**
 * Request parameters for competitionsTeamsRead operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsReadRequest
 */
export interface CompetitionsApiCompetitionsTeamsReadRequest {
    /**
     * A unique integer value identifying this Команда.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsTeamsRead
     */
    readonly id: number
}

/**
 * Request parameters for competitionsTeamsUpdate operation in CompetitionsApi.
 * @export
 * @interface CompetitionsApiCompetitionsTeamsUpdateRequest
 */
export interface CompetitionsApiCompetitionsTeamsUpdateRequest {
    /**
     * A unique integer value identifying this Команда.
     * @type {number}
     * @memberof CompetitionsApiCompetitionsTeamsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {UserTeam}
     * @memberof CompetitionsApiCompetitionsTeamsUpdate
     */
    readonly data: UserTeam
}

/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI {
    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalApplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalApply(requestParameters: CompetitionsApiCompetitionsPersonalApplyRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalApply(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalCreate(requestParameters: CompetitionsApiCompetitionsPersonalCreateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalDelete(requestParameters: CompetitionsApiCompetitionsPersonalDeleteRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalList(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalPartialUpdate(requestParameters: CompetitionsApiCompetitionsPersonalPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalRead(requestParameters: CompetitionsApiCompetitionsPersonalReadRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsPersonalUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsPersonalUpdate(requestParameters: CompetitionsApiCompetitionsPersonalUpdateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsPersonalUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Вступить в команду `obj`.
     * @param {CompetitionsApiCompetitionsTeamsApplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsApply(requestParameters: CompetitionsApiCompetitionsTeamsApplyRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsApply(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsTeamsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsCreate(requestParameters: CompetitionsApiCompetitionsTeamsCreateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsTeamsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsDelete(requestParameters: CompetitionsApiCompetitionsTeamsDeleteRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsList(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsTeamsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsPartialUpdate(requestParameters: CompetitionsApiCompetitionsTeamsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsTeamsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsRead(requestParameters: CompetitionsApiCompetitionsTeamsReadRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompetitionsApiCompetitionsTeamsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public competitionsTeamsUpdate(requestParameters: CompetitionsApiCompetitionsTeamsUpdateRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).competitionsTeamsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}
